{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","state","searchField","e","setState","target","value","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","class","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAceA,EAXF,SAACC,GAAD,OACX,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,8BACHC,IAAI,YAEN,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCEPC,G,MARE,SAACR,GAAD,OACf,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCKVO,G,MATG,SAACX,GAAD,OAChB,uBACEC,UAAU,SACVW,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMe,iBCkCLC,E,4MAnCbC,MAAQ,CACNR,SAAU,GACVS,YAAa,I,EAWfH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,uDATxC,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKP,SAAS,CAAEX,SAAUkB,S,oBAQhC,WAAU,IAAD,EAC2BC,KAAKX,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZW,EAAmBpB,EAASqB,QAAO,SAAC3B,GAAD,OACvCA,EAAQG,KAAKyB,cAAcC,SAASd,EAAYa,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,oBAAIgC,MAAM,KAAV,6BACA,cAAC,EAAD,CACEpB,YAAY,iBACZE,aAAca,KAAKb,eAErB,cAAC,EAAD,CAAUN,SAAUoB,W,GA9BVK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.019968bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      src={`https://robohash.org/${props.monster.id}.png?set=set2&size=180x180`}\r\n      alt=\"monster\"\r\n    />\r\n    <h1>{props.monster.name}</h1>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../Card/Card';\r\nimport './CardList.css';\r\n\r\nconst CardList = (props) => (\r\n  <div className=\"card-list\">\r\n    {props.monsters.map((monster) => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = (props) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={props.placeholder}\r\n    onChange={props.handleChange}\r\n  />\r\n);\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\nimport './App.css';\nimport { Component } from 'react';\nimport CardList from './components/CardList/CardList';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: '',\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({ monsters: users });\n      });\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1 class=\"h1\">Monster Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monster\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}